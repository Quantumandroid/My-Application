<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.wingnity.jsonparsingtutorial"
    android:versionCode="1"
    android:versionName="1.0" >

    <uses-sdk
        android:minSdkVersion="8"
        android:targetSdkVersion="18" />
    <uses-permission android:name="android.permission.INTERNET"/>

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/AppTheme" >
        <activity
            android:name="com.wingnity.jsonparsingtutorial.MainActivity"
            android:label="@string/app_name" >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
// custom list adapter
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.Color;
import android.graphics.Typeface;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.TextAppearanceSpan;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Filter;
import android.widget.TextView;
import com.softlogic.sl02.R;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
public class $Adapter_Class_Name extends BaseAdapter {

    Context mContext;
    LayoutInflater inflater;

    private List<$ListModelClass> list = null;
    //this is used for filter
    private ArrayList<$ListModelClass> arrayList;
    private String mSearchText;
    private ValueFilter valueFilter;

    // create constructor
    public $Adapter_Class_Name(Context context, List<$ListModelClass> list) {

        mContext = context;
        this.list = list;
        inflater = LayoutInflater.from(mContext);
        this.arrayList = new ArrayList<$ListModelClass>();
        this.arrayList .addAll(list);

    }

    // declare list item view's
    public class ViewHolder {
        TextView textView1;
        TextView textView2;
        // todo add here
    }

    @Override
    public int getCount() {
        return list .size();
    }

    @Override
    public $ListModelClass getItem(int position) {
        return list .get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(final int position, View view, ViewGroup viewGroup) {
        final ViewHolder holder;
        if (view == null) {
            holder = new ViewHolder();
            view = inflater.inflate(R.layout.$List_Item_Layout , null);
            // Locate the TextViews in listview_item.xml
            holder.textView1 = (TextView) view.findViewById(R.id.textView1_id);
            holder.textView2 = (TextView) view.findViewById(R.id.textView2_id);
            // todo add here

            view.setTag(holder);
        } else {
            holder = (ViewHolder) view.getTag();
        }

        // Set the results into TextViews
        $ListModelClass item = list .get(position);
        holder.textView1.setText(item.get$Model_String1_First_Caps ());
        holder.textView2.setText(item.get$Model_String2_First_Caps());
        // todo add here

        //  Highlight searched text
        String fullText = item.get$Model_String1_First_Caps().toLowerCase(Locale.getDefault());
        if (mSearchText != null && !mSearchText.isEmpty()) {
            int startPos = fullText.toLowerCase(Locale.US).indexOf(mSearchText.toLowerCase(Locale.US));
            int endPos = startPos + mSearchText.length();

            if (startPos != -1) {
                Spannable spannable = new SpannableString(fullText);
                ColorStateList blueColor = new ColorStateList(new int[][]{new int[]{}}, new int[]{Color.BLUE});
                TextAppearanceSpan highlightSpan = new TextAppearanceSpan(null, Typeface.BOLD, -1, blueColor, null);
                spannable.setSpan(highlightSpan, startPos, endPos, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                holder.textView1.setText(spannable);
            } else {
                holder.textView1.setText(fullText);
            }
        } else {
            holder.textView1.setText(fullText);
        }
//  End highlights

        return view;
    }

    // method for search list
    public Filter getFilter() {

        if(valueFilter==null) {

            valueFilter=new ValueFilter();
        }

        return valueFilter;
    }

    private class ValueFilter extends Filter {

        //Invoked in a worker thread to filter the data according to the constraint.
        @Override
        protected FilterResults performFiltering(CharSequence charSequence) {

            FilterResults results=new FilterResults();

            if(charSequence!=null && charSequence.length()>0){

                ArrayList<$ListModelClass> filterList=new ArrayList<$ListModelClass>();

                for(int i=0;i<arrayList .size();i++){

                    if((arrayList .get(i).get$Model_Search_String_First_Caps().toUpperCase())
                            .contains(charSequence.toString().toUpperCase())) {
                        $ListModelClass listModel = new $ListModelClass();
                        listModel.set$Model_String1_First_Caps(arrayList .get(i).get$Model_String1_First_Caps());
                        listModel.set$Model_String2_First_Caps(arrayList .get(i).get$Model_String2_First_Caps());
                        filterList.add(listModel);
                    }
                }
                results.count=filterList.size();
                results.values=filterList;
            }else{
                results.count=arrayList .size();
                results.values=arrayList;
            }
            return results;
        }


        //Invoked in the UI thread to publish the filtering results in the user interface.
        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            mSearchText = constraint.toString().toLowerCase();
            list=(ArrayList<$ListModelClass>) results.values;
            notifyDataSetChanged();

        }
    }

}
        
        
        //php
        <?php

    //connect to mysql database first
        define('HOST','localhost');//host
    	define('USER','root');//username
    	define('PASS','');//password
    	define('DB','$android$');//Database name

    	$con = mysqli_connect(HOST,USER,PASS,DB) or die('Unable to Connect');

    if ($_SERVER['REQUEST_METHOD'] == 'POST') {

        $request_code = $_POST['request_code'];
        switch ($request_code) {
                    case "101": // $ActivityName$_$methodName$
						$code_here$
                        break;
                    
                    default:
                        echo "something goes wrong";
        } // switch closed

    } // if close
    mysqli_close($con);
?>
        
        
        // mysql
        import android.app.ProgressDialog;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;


public class MySql {
    // Listener defined earlier
    public interface OnDataLoadListener {

        public void onDataLoaded(String data);
    }

    // Member variable was defined earlier
    private OnDataLoadListener listener;
    private Context context;
    private String PHP_URL;
    private HashMap<String, String> hashMap;

    // Constructor where listener events are ignored
    public MySql(Context mContext, String url, HashMap<String, String> map) {
        // set null or default listener or accept as argument to constructor
        this.listener = null;
        this.context = mContext;
        this.PHP_URL = url;
        this.hashMap = map;
        checkInternet();

    }

    // Assign the listener implementing events interface that will receive the events
    public void setOnDataLoadListener(OnDataLoadListener listener) {
        this.listener = listener;
    }

    private void loadDataAsync() {

        class LoadDataAsync extends AsyncTask<Void, Void, String> {
            private ProgressDialog loading;

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
                loading = ProgressDialog.show(context, "", "Please wait...", false, false);
            }

            @Override
            protected String doInBackground(Void... params) {

                //Creating a URL
                URL url;

                //StringBuilder object to store the message retrieved from the server
                StringBuilder sb = new StringBuilder();
                try {
                    //Initializing Url
                    url = new URL(PHP_URL);

                    //Creating an httmlurl connection
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();

                    //Configuring connection properties
                    conn.setReadTimeout(15000);
                    conn.setConnectTimeout(15000);
                    conn.setRequestMethod("POST");
                    conn.setDoInput(true);
                    conn.setDoOutput(true);

                    //Creating an output stream
                    OutputStream os = conn.getOutputStream();

                    //Writing parameters to the request
                    //We are using a method getPostDataString which is defined below
                    BufferedWriter writer = new BufferedWriter(
                            new OutputStreamWriter(os, "UTF-8"));
                    writer.write(getPostDataString(hashMap));

                    writer.flush();
                    writer.close();
                    os.close();
                    int responseCode = conn.getResponseCode();

                    if (responseCode == HttpsURLConnection.HTTP_OK) {

                        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                        sb = new StringBuilder();
                        String response;
                        //Reading server response
                        while ((response = br.readLine()) != null) {
                            sb.append(response);
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
                return sb.toString();

            }

            @Override
            protected void onPostExecute(String json_string) {
                super.onPostExecute(json_string);
                loading.dismiss();

                if (json_string.equals("")) {
                    Toast.makeText(context, "No data found", Toast.LENGTH_LONG).show();
                } else {

                    // Now let's trigger the event
                    if (listener != null) {
                        listener.onDataLoaded(json_string); // <---- fire listener here
                    }

                }
            }

        }
        LoadDataAsync loadDataAsync = new LoadDataAsync();
        loadDataAsync.execute();
    }

    private String getPostDataString(HashMap<String, String> params) throws UnsupportedEncodingException {
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for (Map.Entry<String, String> entry : params.entrySet()) {
            if (first)
                first = false;
            else
                result.append("&");


            result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
            result.append("=");
            result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
        }

        return result.toString();
    }

    private void checkInternet() {
        if (isNetworkAvailable()) {
            loadDataAsync();
        } else {
            Toast.makeText(context, "There is no internet available", Toast.LENGTH_LONG).show();
        }
    }

    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }


}
        
        // Request
        import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Handler;
import android.view.WindowManager;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.HttpsURLConnection;

public class Request extends Activity {

   static boolean doubleBackToExitPressedOnce = false;

    // if you want hide title bar in your activity just add this two lines in Base Application Theme in style.xml
        /*
        *   <item name="windowActionBar">false</item>
        *   <item name="windowNoTitle">true</item>
        *
        */
/*todo static methods Start here*/
    public static void doubleBackToExit(final Context context) {

        if (doubleBackToExitPressedOnce) {
            //super.onBackPressed();
            ((Activity) context).finish();
            return;
        }

        doubleBackToExitPressedOnce = true;
        Toast.makeText(context, "Press again to exit", Toast.LENGTH_LONG).show();

        new Handler().postDelayed(new Runnable() {

            @Override
            public void run() {
                doubleBackToExitPressedOnce = false;
            }
        }, 3000);

    }

    public static String getCurrentDate() {
        int mYear, mMonth, mDay;
        // Get Current Date
        final Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH);
        mDay = c.get(Calendar.DAY_OF_MONTH);

        return "" + mYear + "-" + (mMonth + 1) + "-" + mDay;
    }

    public static String getCurrentTime() {
        int hours, minutes, seconds;
        // Get Current Date
        final Calendar c = Calendar.getInstance();
        hours = c.get(Calendar.HOUR_OF_DAY);
        minutes = c.get(Calendar.MINUTE);
        seconds = c.get(Calendar.SECOND);

        return "" + hours + ":" + minutes + ":" + seconds;
    }

    public static String getCurrentDateTime() {
        int mYear, mMonth, mDay, hours, minutes, seconds;
        // Get Current Date
        final Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH);
        mDay = c.get(Calendar.DAY_OF_MONTH);
        hours = c.get(Calendar.HOUR_OF_DAY);
        minutes = c.get(Calendar.MINUTE);
        seconds = c.get(Calendar.SECOND);

        // returns standard mysql datetime format      yyyy-mm-dd HH:MM:SS
        return "" + mYear + "-" + (mMonth + 1) + "-" + mDay + " " + hours + ":" + minutes + ":" + seconds;

    }

    public static boolean isNetworkAvailable(Context context) {
        // to use this you must need internet permission in manifest.xml file
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();

        return (activeNetworkInfo != null) && (activeNetworkInfo.isConnected());

    }

    public static void makeFullscreen(Context context, boolean isRequiredFullscreen) {

        if (isRequiredFullscreen) {
            ((Activity) context).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
            ((Activity) context).getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

        } else {

            ((Activity) context).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
            ((Activity) context).getWindow().addFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
        }
    }

    public static void splashScreen(final Context context1, final Class<?> NextActivity, int timeInMillis, boolean fullscreen) {

        if (fullscreen) {
            ((Activity) context1).getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
            ((Activity) context1).getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        new Handler().postDelayed(new Runnable() {

            @Override
            public void run() {

                context1.startActivity(new Intent(context1, NextActivity));
                ((Activity) context1).finish();
            }

        }, timeInMillis);


    }

    public static void exitApplication(Context ctx, Class<?> MaiN) {

        Intent exitIntent = new Intent(ctx, MaiN);
        exitIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        exitIntent.putExtra("EXIT", true);
        ctx.startActivity(exitIntent);


    }

    public static void exitApplication(Context context) {
        // receive intent for exit from app
        if (((Activity) context).getIntent().getBooleanExtra("EXIT", false)) {
            ((Activity) context).finish();


        }
    }

    public static void shareText(Context context, String text_to_share) {
        String title = "Share with";

        Intent sendIntent = new Intent();
        sendIntent.setAction(Intent.ACTION_SEND);
        sendIntent.putExtra(Intent.EXTRA_TEXT, text_to_share);
        sendIntent.setType("text/plain");
        context.startActivity(Intent.createChooser(sendIntent, title));
    }
/* todo static methods end here*/


 //-------------------------------------------------------------------------------------------------------------
    // methods for send mysql request (basic)
    public String sendPostRequest(String requestURL, HashMap<String, String> postDataParams) {
        //Creating a URL
        URL url;

        //StringBuilder object to store the message retrieved from the server
        StringBuilder sb = new StringBuilder();
        try {
            //Initializing Url
            url = new URL(requestURL);

            //Creating an httmlurl connection
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();

            //Configuring connection properties
            conn.setReadTimeout(15000);
            conn.setConnectTimeout(15000);
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);

            //Creating an output stream
            OutputStream os = conn.getOutputStream();

            //Writing parameters to the request
            //We are using a method getPostDataString which is defined below
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(getPostDataString(postDataParams));

            writer.flush();
            writer.close();
            os.close();
            int responseCode = conn.getResponseCode();

            if (responseCode == HttpsURLConnection.HTTP_OK) {

                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                sb = new StringBuilder();
                String response;
                //Reading server response
                while ((response = br.readLine()) != null) {
                    sb.append(response);
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return sb.toString();
    }

    public String sendGetRequest(String requestURL) {
        StringBuilder sb = new StringBuilder();
        try {
            URL url = new URL(requestURL);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));

            String s;
            while ((s = bufferedReader.readLine()) != null) {
                sb.append(s + "\n");
            }
        } catch (Exception e) {
        }
        return sb.toString();
    }

    public String sendGetRequestParam(String requestURL, String id) {
        StringBuilder sb = new StringBuilder();
        try {
            URL url = new URL(requestURL + id);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));

            String s;
            while ((s = bufferedReader.readLine()) != null) {
                sb.append(s + "\n");
            }
        } catch (Exception e) {
        }
        return sb.toString();
    }

    private String getPostDataString(HashMap<String, String> params) throws UnsupportedEncodingException {
        StringBuilder result = new StringBuilder();
        boolean first = true;
        for (Map.Entry<String, String> entry : params.entrySet()) {
            if (first)
                first = false;
            else
                result.append("&");

            result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
            result.append("=");
            result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
        }

        return result.toString();
    }

    //----------------------------------------------------------------------------------------------------------
}

       // mysql live
         HashMap<String, String> hashMap = new HashMap<>();
        hashMap.put(Strings.PHP_REQUEST_KEY, Strings.$MainActivity$_$insert$);
        //todo add data into hashMap in key-value pair
        $new$
        

        MySql mysql = new MySql(this, Strings.PHP_URL, hashMap);
        mysql.setOnDataLoadListener(new MySql.OnDataLoadListener() {
            @Override
            public void onDataLoaded(String data) {

                Toast.makeText($this$, data, Toast.LENGTH_LONG).show();

            }
        });
